# Carica i pacchetti necessari
library(forecast)
library(ggplot2)
library(readxl)
library(zoo)

# Carica i dati da Excel
data <- read_excel("D:/Desktop e cose/Desktop/Tesi/PIL_Trasposto.xlsx")

# Converte la colonna 'Tempo' in formato YearQuarter
# Assumendo che il formato sia "YYYY-QN" (es. "2023-Q1")
data$Tempo <- as.yearqtr(data$Tempo, format = "%Y-Q%q")

# Assicura che i dati siano ordinati per 'Tempo'
data <- data[order(data$Tempo), ]

# Crea l'oggetto serie storica con frequenza trimestrale
start_year <- as.numeric(format(as.Date(data$Tempo[1]), "%Y"))
start_quarter <- as.numeric(format(as.Date(data$Tempo[1]), "%m")) %/% 3
ts_data <- ts(data$PIL, start = c(start_year, start_quarter + 1), frequency = 4)

# Prepara i dati effettivi per il grafico (dal 2022-Q1 in poi)
ts_data_plot <- window(ts_data, start = c(2022, 1))
actual_dates <- as.Date(as.yearqtr(time(ts_data_plot)), frac = 1)  # Fine trimestre
actual_data <- data.frame(
  Date = actual_dates,
  Value = as.numeric(ts_data_plot),
  Lower = NA,
  Upper = NA,
  Type = "Dati Reali"
)

# Data di fine training
train_end_qtr <- as.yearqtr("2024 Q2")  # Fine Q2 2024

# Trova l'indice di fine training
train_end_index <- which(as.yearqtr(time(ts_data)) == train_end_qtr)
if (length(train_end_index) == 0) {
  stop("La data di fine training non Ã¨ presente nei dati.")
}

# Estrai i dati di training usando finestra espandibile (tutti i dati fino a train_end_date)
train_data <- window(ts_data, end = train_end_qtr)

# Stima del modello ARIMA
fit_personal <- auto.arima(train_data)

# Previsione dei prossimi 4 trimestri con intervalli di confidenza al 95%
h <- 4  # Q3 2024 - Q2 2025
fc_personal <- forecast(fit_personal, h = h, level = 95)

# Crea un data frame per la previsione
# Genera le date dei prossimi trimestri
last_train_qtr <- as.yearqtr(end(train_data))
future_quarters <- last_train_qtr + seq(1, h) * 0.25  # Incrementa di un trimestre
dates_personal <- as.Date(as.yearqtr(future_quarters), frac = 1)  # Fine trimestre

personal_forecast_df <- data.frame(
  Date = dates_personal,
  Value = as.numeric(fc_personal$mean),
  Lower = as.numeric(fc_personal$lower),
  Upper = as.numeric(fc_personal$upper),
  Type = "Previsione"
)

# Combina i dati reali e la previsione per il grafico
plot_data <- rbind(
  actual_data,
  personal_forecast_df
)

# Grafico della previsione
ggplot(plot_data, aes(x = Date, y = Value, color = Type)) +
  geom_line() +
  geom_ribbon(
    data = subset(plot_data, Type == "Previsione"),
    aes(ymin = Lower, ymax = Upper, fill = Type),
    alpha = 0.2,
    color = NA
  ) +
  scale_x_date(
    limits = as.Date(c("2022-01-01", "2025-06-30")),
    date_breaks = "3 months",
    labels = function(x) {
      q <- quarters(x)
      y <- format(x, "%Y")
      paste0(y, "-Q", q)
    }
  ) +
  ggtitle("Previsione PIL con Modello ARIMA (Finestra Espandibile)") +
  xlab("Trimestre") +
  ylab("PIL") +
  scale_color_manual(values = c("Dati Reali" = "black", "Previsione" = "blue")) +
  scale_fill_manual(values = c("Previsione" = "blue")) +
  theme_minimal() +
  theme(
    legend.title = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
    plot.title = element_text(hjust = 0.5)
  )